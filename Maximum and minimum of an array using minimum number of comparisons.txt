Tournament Method:
struct Pair getMinMax(int arr[], int low, 
                                 int high) 
{ 
    struct Pair minmax, mml, mmr;      
    int mid; 
      
    // If there is only on element  
    if (low == high) 
    { 
        minmax.max = arr[low]; 
        minmax.min = arr[low];      
        return minmax; 
    }  
      
    // If there are two elements  
    if (high == low + 1) 
    {  
        if (arr[low] > arr[high])  
        { 
            minmax.max = arr[low]; 
            minmax.min = arr[high]; 
        }  
        else
        { 
            minmax.max = arr[high]; 
            minmax.min = arr[low]; 
        }  
        return minmax; 
    } 
      
    // If there are more than 2 elements  
    mid = (low + high) / 2;  
    mml = getMinMax(arr, low, mid); 
    mmr = getMinMax(arr, mid + 1, high);  
      
    // Compare minimums of two parts 
    if (mml.min < mmr.min) 
        minmax.min = mml.min; 
    else
        minmax.min = mmr.min;      
      
    // Compare maximums of two parts 
    if (mml.max > mmr.max) 
        minmax.max = mml.max; 
    else
        minmax.max = mmr.max;      
      
    return minmax; 
}


Compare in Pairs Method:
struct Pair getMinMax(int arr[], int n) 
{ 
    struct Pair minmax;      
    int i;  
      
    // If array has even number of elements  
    // then initialize the first two elements  
    // as minimum and maximum  
    if (n % 2 == 0) 
    { 
        if (arr[0] > arr[1])      
        { 
            minmax.max = arr[0]; 
            minmax.min = arr[1]; 
        }  
        else
        { 
            minmax.min = arr[0]; 
            minmax.max = arr[1]; 
        } 
          
        // Set the startung index for loop  
        i = 2;  
    }  
      
    // If array has odd number of elements 
    // then initialize the first element as 
    // minimum and maximum 
    else
    { 
        minmax.min = arr[0]; 
        minmax.max = arr[0]; 
          
        // Set the startung index for loop  
        i = 1;  
    } 
      
    // In the while loop, pick elements in 
    // pair and compare the pair with max  
    // and min so far 
    while (i < n - 1)  
    {          
        if (arr[i] > arr[i + 1])          
        { 
            if(arr[i] > minmax.max)      
                minmax.max = arr[i]; 
                  
            if(arr[i + 1] < minmax.min)          
                minmax.min = arr[i + 1];      
        }  
        else        
        { 
            if (arr[i + 1] > minmax.max)      
                minmax.max = arr[i + 1]; 
                  
            if (arr[i] < minmax.min)          
                minmax.min = arr[i];      
        } 
          
        // Increment the index by 2 as  
        // two elements are processed in loop 
        i += 2;  
    }          
    return minmax; 
}